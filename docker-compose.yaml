services:
  kong-migrations:
    image: kong:3.7
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong_postgres
      - KONG_PG_USER=postgres
      - KONG_PG_PASSWORD=postgres
    command: kong migrations bootstrap
    depends_on:
      - kong_postgres
    networks:
      - microservices_network
    restart: on-failure

  kong:
    image: kong:3.7
    container_name: kong
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong_postgres
      - KONG_PG_USER=postgres
      - KONG_PG_PASSWORD=postgres
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    ports:
      - "8025:8000"
      - "8001:8001"  # Exponer API de administraci√≥n
    depends_on:
      - kong_postgres
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - kong_data:/usr/local/kong
      - ../kong/config:/etc/kong:ro

  kong_postgres:
    image: postgres:15
    container_name: kong_postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=kong
    ports:
      - "8026:5432"
    volumes:
      - kong_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  token-service:
    build:
      context: ../services/token-service
      dockerfile: Dockerfile
    container_name: wankarlab-token-service
    ports:
      - "8021:8081"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      #- KEYCLOAK_PUBLIC_URL=http://keycloak:8080  # Ajustado a hostname de la red
      - KEYCLOAK_PUBLIC_URL=http://localhost:8020
      - TS_KEYCLOAK_TOKEN_ENDPOINT=http://keycloak:8080/realms/rantipay/protocol/openid-connect/token  # Ajustado a hostname
      - TS_KEYCLOAK_JWKS_ENDPOINT=http://keycloak:8080/realms/rantipay/protocol/openid-connect/certs  # Ajustado a hostname
      - TS_KEYCLOAK_CLIENT_ID=otp-service-user
      - TS_KEYCLOAK_CLIENT_SECRET=gO8RVOxmRsVXpR8cEiVDEAXAMmE9eDUW
      - TS_KEYCLOAK_SCOPES=openid profile email
      - TS_KEYCLOAK_AUDIENCE=317305190531334149
      - TS_OTP_VERIFY_ENDPOINT=http://otp-service:8084/verify-otp
      - TS_OTP_SERVICE_ENDPOINT=http://otp-service:8084/send-otp
      - TS_REDIRECT_URI=http://localhost:8025/api/v1/callback
      - TS_REDIS_HOST=redis
      - TS_REDIS_PORT=6379
      - TS_REDIS_PASSWORD=
      - TS_REDIS_DB=0
      - TOKEN_SERVICE_PORT=8081
      - LOG_LEVEL=debug
    env_file:
      - ../services/token-service/.env.local
    networks:
      - microservices_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  redis:
    image: redis:alpine
    container_name: wankarlab-redis
    ports:
      - "8023:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - microservices_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  otp-service:
    image: kennethreitz/httpbin
    container_name: otp-service
    ports:
      - "8022:8084"
    command: gunicorn -b 0.0.0.0:8084 httpbin:app
    networks:
      - microservices_network
    restart: unless-stopped

  loki:
    image: grafana/loki:3.1.1
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ../loki/loki-config.yml:/etc/loki/local-config.yaml:ro
    networks:
      - microservices_network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: prometheus
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - microservices_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ../grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - microservices_network
    restart: unless-stopped

networks:
  microservices_network:
    external: true

volumes:
  kong_data:
  kong_postgres_data:
  redis_data: